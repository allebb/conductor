# We need to check that unless the first argument is 'list' that we require an application name to be specified!
if [[ $UID != 0 ]]; then
    echo "Please login as root or use sudo in order to use Conductor!"
    exit 1
fi

# Assign a variable to the application name argument.
	if [[ -z $1 ]]; then
	echo "No application name given! Syntax is: conductor {option} {application name}"
	exit 1
fi

# We'll ensure that the application name is set to lower case!
APPNAME=$(echo $1 | sed 's/.*/\L&/')

# We'll build the application specific folder name.
APPDIRECTORY=($APP_ROOT/$APPNAME)

function laravelMigrate() {
	if [ -f "$APPDIRECTORY/artisan" ]; then
		sudo php $APPDIRECTORY/artisan migrate
		sudo php $APPDIRECTORY/artisan cache:clear
		sudo php $APPDIRECTORY/artisan dump-autoload
	else
		echo "Skipping migration, cache-clear etc. as no 'Artisan' was found!"
	fi
}

function createMysql() {
	BTICK='`'
	MYSQL=`which mysql`
	# Due to MySQL username length limitation we'll have to shorten the username if it exceeds 14 characters ('u_' + username)
	MYSQLUSERCLEAN="`echo "u_${2//[^a-zA-Z0-9 ]/}" | cut -c -16`"
 	Q1="CREATE DATABASE IF NOT EXISTS ${BTICK}$1${BTICK};"
	Q2="GRANT ALL ON ${BTICK}$1${BTICK}.* TO '$MYSQLUSERCLEAN'@'localhost' IDENTIFIED BY '$3';"
	Q3="FLUSH PRIVILEGES;"
	SQL="${Q1}${Q2}${Q3}"
	$MYSQL -u${MYSQLUSER} -p${MYSQLPASS} -e "$SQL"
                  sudo cp $NGINX_TPLS/conductor_db.json $APPDIRECTORY/conductor.json
                  sudo sed -i "s/@@APPNAME@@/$APPNAME/g" $APPDIRECTORY/conductor.json
                  sudo sed -i "s/@@MYSQLPASSWORD@@/$3/g" $APPDIRECTORY/conductor.json
	echo ""
	echo "MySQL Server Details:"
	echo "DB Name: $1"
	echo "DB Host: localhost"
	echo "Username: $MYSQLUSERCLEAN"
	echo "Password: $3"
	echo ""
	echo "Remember that you may need to update your production DB settings to use the above details!"
	echo ""
}

function backupApplication() {
	sudo cp -R $APPDIRECTORY $TEMP_DIR/$APPNAME
	echo "Backing up MySQL database (if exists)..."
	/usr/bin/mysqldump -u$MYSQLUSER -p$MYSQLPASS --no-create-db  db_$APPNAME | gzip -c | cat > $TEMP_DIR/$APPNAME/appdb.sql.gz
	echo "Compressing backup archive..."
	sudo tar -zcf $TEMP_DIR/$1 -C $TEMP_DIR/$APPNAME/ .
	echo "Cleaning up..."
	sudo rm -Rf $TEMP_DIR/$APPNAME
	sudo mv $TEMP_DIR/$1 $BACKUP_DIR/$1
}

function gitPullReset() {
    echo "Starting upgrade from Git..."
    sudo /usr/bin/git --git-dir=$APPDIRECTORY/.git --work-tree=$APPDIRECTORY reset --hard
    sudo /usr/bin/git --git-dir=$APPDIRECTORY/.git --work-tree=$APPDIRECTORY pull
}