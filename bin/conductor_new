#!/usr/bin/env bash

# Load some configuration and 'common' code in...
BINDIR=/etc/conductor/bin
source /etc/conductor.conf
source $BINDIR/_headers $1 $2

# Application specific...

# We'll check that the application directory doesn't already exist before we go any further!
if [ -d "$APPDIRECTORY" ]; then
	echo "The application already exists on this server!"
	exit 1
fi

# Now we'll prompt for some required information...
echo "Deploying application named: $APPNAME"
echo ""
echo -n "The FQDN(s) for this application: "
read DOMAIN
echo -n "Hosting environment type [production]: "
read ENVIRONMENT
echo -n "Does this application require a MySQL DB? [Y/n] "
read MYSQLREQ
echo -n "Deploy and manage application with Git? [Y/n] "
read USEGIT

# If the user wants to use Git We'll ask them some repository information
if [[ "$USEGIT" == "n" || "$USEGIT" == "N" || "$USEGIT" == "no" || "$USEGIT" == "No" || "$USEGIT" == "NO" ]]
then
	GIT="false"
else
	GIT="true"
	echo ""
	echo -n "Please enter the Git repository URI: "
	read GITURI
	echo ""
fi

# Lets validate the Domain name to ensure it's valid!
#PATTERN="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$";
#if [[ "$DOMAIN" =~ $PATTERN ]]; then
#	DOMAIN=`echo $DOMAIN | tr '[A-Z]' '[a-z]'`
#else
#	echo "Invalid domain name, please try again!"
#	exit 1
#fi

# Lets check that the application name is 14 characters or less
if [ ${#APPNAME} -ge 14 ]; then
    echo "Invalid application name length, a maximum of 14 characters are allowed, please try again!" ; exit 1
fi

# Now we need to copy the virtual host template
CONFIG=$NGINX_CONFIG/$APPNAME.conf
HLOGS=($NGINX_LOGS/$APPNAME)
 cp $NGINX_TPLS/laravel_template.tpl $CONFIG
 sed -i "s/@@DOMAIN@@/$DOMAIN/g" $CONFIG
 sed -i "s/@@APPNAME@@/$APPNAME/g" $CONFIG
 sed -i "s#@@HLOGS@@#/$HLOGS/#" $CONFIG


# Lets set the environment type in the configuration file
if [[ "$ENVIRONMENT" == '' ]]; then
    ENVIRONMENT=production
fi
sed -i "s/@@ENVIROMENT@@/$ENVIRONMENT/g" $CONFIG

# Lets set up the directory structure and lock down some directory permissions.
 mkdir $APPDIRECTORY
 mkdir $HLOGS
 chown $WEB_SERVER_GROUP:$WEB_SERVER_GROUP $HLOGS -R
 chmod 755 $CONFIG

# Now we need to reload Nginx!
 $NGINX_INIT reload

echo ""
if [[ "$GIT" == "true" ]]
then
	echo "We'll now deploy your application using Git..."
	# We need to delete the previously created directory as the 'git clone' will clone into this folder.
	rm -Rf $APPDIRECTORY
	 git clone $GITURI $APPDIRECTORY
	# We'll now migrate and clear cache etc.
	if [ -d "$APPDIRECTORY/vendor" ]; then
		# We'll assume the application has its own vendor dependencies and we won't screw around!
		echo "Skipping dependencies as 'vendor' directory exists."
	else
		# Now vendor folder exists so we'll have to download using composer!
		echo "Downloading dependencies..."
		/usr/bin/composer install --no-dev --optimize-autoloader --working-dir=$APPDIRECTORY
	fi
else
	echo "As you have chosen not to deploy your application using Git you must first manually copy your application file into: "
        echo ""
        echo "$APPDIRECTORY/"
        echo ""
        echo "or if you are migrating from another server you can use use 'conductor restore $APPNAME' to restore this application from a backup archive."
fi

# We'll set some last minute file ownership permissions...
echo "Setting ownership permissions on application files..."
 chown $WEB_SERVER_GROUP:$WEB_SERVER_GROUP $APPDIRECTORY -R

# If a MySQL database is required we'll create one now!
if [[ "$MYSQLREQ" == "y" || "$MYSQLREQ" == "Y" || "$MYSQLREQ" == "yes" || "$MYSQLREQ" == "Yes" ]]
then
	echo ""
	echo -n "Please enter a password for the MySQL database: "
	read USERMYSQLPASS
	createMysql db_$APPNAME u_$APPNAME $USERMYSQLPASS
fi

if [ -f "$APPDIRECTORY/artisan" ]; then
    # Running Laravel Application specific stuff...
    echo "Migrating the database..."
    laravelMigrate
fi

echo "...finished!"
exit 0
